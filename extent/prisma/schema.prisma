// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    chats         Chat[]
    conversations Conversation[]
    friends       Friendship[]
    blocked       Block[]  
}

model Friendship {
  friendId  String @unique
  user      User @relation(fields: [friendId], references: [id])
}
model Block {
  blockedId String @unique
  user      User   @relation (fields: [blockedId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Chat {
  id        String    @id @default(cuid())
  userId    String
  convoId   String
  content   String
  timestamp DateTime  @default(now())
  saved     Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [convoId], references: [id])

  @@index([userId])
  @@index([convoId])
}

model Conversation {
  id   String  @id @default(cuid())
  users User[] @relation()
  chats Chat[]

  @@map("conversations")
}

model Sample {
  data String
  id   String    @id @default(cuid())
}